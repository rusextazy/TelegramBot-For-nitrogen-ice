import asyncio

from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from app.filters.admin_type import IsBotAdminFilter
from app.handlers.admin.kb_admin import kb_admin, kb_exit_admin
from app.database.models import get_all_chat_ids


class MyForm(StatesGroup):
    Message_text = State()


router = Router()


@router.message(IsBotAdminFilter(is_admin=True),
                F.text == "üì© –†–∞—Å—Å—ã–ª–∫–∞")
async def send_message(msg: types.Message, state: FSMContext):
    await msg.answer(text="<b><i>–¢—É—Ç –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞!</i></b>\n\n"
                          "–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–∫—É —Å —Ç–µ–∫—Å—Ç–æ–º, –ª–∏–±–æ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç!", reply_markup=kb_exit_admin)
    await state.set_state(MyForm.Message_text)


@router.message(MyForm.Message_text)
async def send_message_to_users(msg: types.Message, state: FSMContext):
    await state.update_data(data_user=msg.text)
    users = await get_all_chat_ids()
    UserCount = 0
    NotUserCount = 0
    for UserID in users:
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await msg.send_copy(UserID)
            await asyncio.sleep(0.036)
            UserCount += 1
        except:
            NotUserCount += 1
            pass
    await msg.bot.send_message(chat_id=msg.from_user.id, text=f"<b><i>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–∞—Å—Å—ã–ª–∫–µ</i></b>\n\n"
                                                              f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: <code>{UserCount}</code>\n"
                                                              f"–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <code>{NotUserCount}</code>",
                               reply_markup=kb_admin)
    await state.clear()

