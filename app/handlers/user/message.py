import re

from aiogram import Router, F, Bot
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from aiogram.filters import Command

from app.keyboards.reply import kb_menu, kb_exit, kb_goods, kb_choice, kb_delivery, kb_address
from app.keyboards.inline import kb_price
from app.text.main import reply
from app.utils.state import Application
from app.database.models import check_user_to_db, get_text

router = Router()


@router.message(F.text.in_(("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "–û—Ç–º–µ–Ω–∞", "–ú–µ–Ω—é")))
async def main_menu(msg: Message, state: FSMContext):
    await state.clear()
    await msg.reply(text="–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!", reply_markup=kb_menu)


@router.message(F.text == "üì± –ö–æ–Ω—Ç–∞–∫—Ç—ã")
@router.message(Command("contacts"))
async def get_information(msg: Message):
    name = msg.from_user.username
    chat_id = msg.from_user.id
    await check_user_to_db(name, chat_id)
    result = await get_text(id_text=5)
    loading_works = result.replace(r'\n', '\n')
    await msg.answer(text=f'{loading_works}', parse_mode='HTML')


@router.message(F.text == "üë®‚Äçüíª –ü—Ä–∞–π—Å")
@router.message(Command("price"))
async def get_information(msg: Message):
    name = msg.from_user.username
    chat_id = msg.from_user.id
    await check_user_to_db(name, chat_id)
    await msg.answer(text="<b><i>–ü—Ä–∞–π—Å –ê–∑–æ—Ç - –°—É—Ö–æ–π –ª–µ–¥</i></b>\n\n(–≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–Ω–æ–ø–∫–∞–º–∏)", reply_markup=kb_price)


@router.message(F.text == "‚òïÔ∏è –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É")
@router.message(Command("application"))
async def get_statement(msg: Message, state: FSMContext):
    name = msg.from_user.username
    chat_id = msg.from_user.id
    await check_user_to_db(name, chat_id)
    await msg.answer("–§–æ—Ä–º–∞ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∞ (–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –±—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏)üëá\n"
                     "–í—ã –≤—Å–µ–≥–¥–∞ —Å–º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞—è–≤–∫—É –∑–∞–Ω–æ–≤–æ.")
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ –î–∞—Ç—É.\n–§–æ—Ä–º–∞—Ç: 00.00.0000", reply_markup=kb_exit)
    await state.set_state(Application.Date)


async def check_date_format(date):
    pattern = r"^\d{2}\.\d{2}\.\d{4}$"  # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ 00.00.0000
    if re.match(pattern, date):
        return True
    else:
        return False


@router.message(Application.Date)
async def get_name_child(msg: Message, state: FSMContext):
    if await check_date_format(msg.text):
        await state.update_data(data_user=msg.text)
        await msg.answer(text="–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤—Ä–µ–º–µ–Ω–∏\n–§–æ—Ä–º–∞—Ç: 00:00-00:00\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –±—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã–µ "
                              "–∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º")
        await state.set_state(Application.Time_Interval)
    else:
        await msg.answer(text="–ò–∑–≤–∏–Ω–∏—Ç–µ, –±—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏!\n–ü—Ä–∏ –∫–∞–∂–¥–æ–º —à–∞–≥–µ –µ—Å—Ç—å –§–æ—Ä–º–∞—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è!")


async def check_time_format(time):
    pattern = r"^\d{2}:\d{2}-\d{2}:\d{2}$"  # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 00:00-00:00
    if re.match(pattern, time):
        return True
    else:
        return False


@router.message(Application.Time_Interval)
async def get_data_child(msg: Message, state: FSMContext):
    if await check_time_format(msg.text):
        await state.update_data(time_interval_user=msg.text)
        await msg.answer(text="–í—ã–±–µ—Ä–µ—Ç–µ —Ç–æ–≤–∞—Ä, –∫–∞–∫–æ–π –≤–∞–º –Ω—É–∂–µ–Ω(–Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É)", reply_markup=kb_goods)
        await state.set_state(Application.Goods)
    else:
        await msg.answer(
            text="–ò–∑–≤–∏–Ω–∏—Ç–µ, –±—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏!\n–ü—Ä–∏ –∫–∞–∂–¥–æ–º —à–∞–≥–µ –µ—Å—Ç—å –§–æ—Ä–º–∞—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è!")


@router.message(Application.Goods)
async def get_data_child(msg: Message, state: FSMContext):
    if msg.text == "–õ–µ–¥":
        await state.update_data(goods_user=msg.text)
        await msg.answer(text="–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–≥ (–ª–µ–¥)", reply_markup=kb_exit)
        await state.set_state(Application.Quantity)
    elif msg.text == "–ê–∑–æ—Ç":
        await state.update_data(goods_user=msg.text)
        await msg.answer(text="–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏—Ç—Ä–æ–≤ (–∞–∑–æ—Ç)", reply_markup=kb_exit)
        await state.set_state(Application.Quantity)
    else:
        await msg.answer(
            text="–ò–∑–≤–∏–Ω–∏—Ç–µ, –±—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏!\n–ü—Ä–∏ –∫–∞–∂–¥–æ–º —à–∞–≥–µ –µ—Å—Ç—å –§–æ—Ä–º–∞—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è!")


@router.message(Application.Quantity)
async def get_education_child(msg: Message, state: FSMContext):
    await state.update_data(quantity_user=msg.text)
    await msg.answer(text="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–ª–∏—á–∏–µ —Ç–∞—Ä—ã\n–§–æ—Ä–º–∞—Ç: –ù–µ—Ç (–ï—Å–ª–∏ –Ω–µ—Ç —Ç–∞—Ä—ã), –ï—Å—Ç—å (–ï—Å–ª–∏ –µ—Å—Ç—å —Ç–∞—Ä–∞)")
    await state.set_state(Application.Availability_Of_Packaging)


@router.message(Application.Availability_Of_Packaging)
async def get_contacts_child(msg: Message, state: FSMContext):
    await state.update_data(availability_of_packaging_user=msg.text)
    await msg.answer(text="–í—ã–±–µ—Ä–µ—Ç–µ –Ω—É–∂–Ω–∞ –ª–∏ –≤–∞–º –¥–æ—Å—Ç–∞–≤–∫–∞ (–Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É)", reply_markup=kb_delivery)
    await state.set_state(Application.Delivery)


@router.message(Application.Delivery)
async def get_contacts_child(msg: Message, state: FSMContext):
    if msg.text == "–î–∞, –Ω—É–∂–Ω–∞":
        await state.update_data(delivery_user=msg.text)
        await msg.answer(text="–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏.", reply_markup=kb_exit)
        await state.set_state(Application.Address)
    elif msg.text == "–ù–µ—Ç, –Ω–µ –Ω—É–∂–Ω–∞":
        await state.update_data(delivery_user=msg.text)
        await msg.answer(text="–í—ã–±–µ—Ä–µ—Ç–µ –æ—Ç–∫—É–¥–∞ –∑–∞–±–µ—Ä–µ—Ç–µ —Ç–æ–≤–∞—Ä: (–Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É)", reply_markup=kb_address)
        await state.set_state(Application.Address)
    else:
        await msg.answer(
            text="–ò–∑–≤–∏–Ω–∏—Ç–µ, –±—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏!\n–ü—Ä–∏ –∫–∞–∂–¥–æ–º —à–∞–≥–µ –µ—Å—Ç—å –§–æ—Ä–º–∞—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è!")


@router.message(Application.Address)
async def get_name_mother(msg: Message, state: FSMContext):
    await state.update_data(address_user=msg.text)
    await msg.answer(text="–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n"
                          "–§–æ—Ä–º–∞—Ç: 89503352178", reply_markup=kb_exit)
    await state.set_state(Application.Client_Phone)


async def check_phone_number(phone_number):
    pattern = r"^89\d{9}$"  # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –Ω–æ–º–µ—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 89*********
    if re.match(pattern, phone_number):
        return True
    else:
        return False


@router.message(Application.Client_Phone)
async def get_name_father(msg: Message, state: FSMContext):
    if await check_phone_number(msg.text):
        await state.update_data(client_phone_user=msg.text)
        await msg.answer(text="–í—ã–±–µ—Ä–µ—Ç–µ, –∫–µ–º –≤—ã —è–≤–ª—è–µ—Ç–µ—Å—å(–Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É)", reply_markup=kb_choice)
        await state.set_state(Application.Choice)
    else:
        await msg.answer(text="–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n"
                              "–§–æ—Ä–º–∞—Ç: 89503352178")


@router.message(Application.Choice)
async def get_name_father(msg: Message, state: FSMContext):
    if msg.text == "–Æ—Ä.–õ–∏—Ü–æ":
        await state.update_data(choice_user=msg.text)
        await msg.answer(text="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏(–Æ—Ä–ª–∏—Ü–∞)", reply_markup=kb_exit)
        await state.set_state(Application.Name_Of_Organization)
    elif msg.text == "–§–∏–∑.–õ–∏—Ü–æ":
        await state.update_data(choice_user=msg.text)
        await msg.answer(text="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û", reply_markup=kb_exit)
        await state.set_state(Application.Name_Of_Organization)
    else:
        await msg.answer(
            text="–ò–∑–≤–∏–Ω–∏—Ç–µ, –±—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏!\n–ü—Ä–∏ –∫–∞–∂–¥–æ–º —à–∞–≥–µ –µ—Å—Ç—å –§–æ—Ä–º–∞—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è!")


@router.message(Application.Name_Of_Organization)
async def get_parents_contacts(msg: Message, bot: Bot, state: FSMContext):
    await state.update_data(name_of_organization_user=msg.text)
    data_user = await state.get_data()
    time_interval_user = await state.get_data()
    goods_user = await state.get_data()
    quantity_user = await state.get_data()
    availability_of_packaging_user = await state.get_data()
    delivery_user = await state.get_data()
    address_user = await state.get_data()
    client_phone_user = await state.get_data()
    choice_user = await state.get_data()
    name_of_organization_user = await state.get_data()
    get_data = data_user['data_user']
    get_time_interval = time_interval_user['time_interval_user']
    get_goods = goods_user['goods_user']
    get_quantity = quantity_user['quantity_user']
    get_availability_of_packaging = availability_of_packaging_user['availability_of_packaging_user']
    get_delivery_user = delivery_user['delivery_user']
    get_address = address_user['address_user']
    get_client_phone = client_phone_user['client_phone_user']
    get_choice_user = choice_user['choice_user']
    get_name_of_organization = name_of_organization_user['name_of_organization_user']
    await msg.answer(text="–í–∞—à–µ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –°–ø–∞—Å–∏–±–æ –∏ –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞!", reply_markup=kb_menu)
    # –ü–æ–º–µ–Ω—è—Ç—å CHAT_ID
    await bot.send_message(chat_id="-4086537550",
                           text=reply.format(id=msg.from_user.username, Date=get_data,
                                             Time_Interval=get_time_interval, Goods=get_goods,
                                             Quantity=get_quantity, Availability_Of_Packaging=get_availability_of_packaging,
                                             Delivery=get_delivery_user, Address=get_address, Client_Phone=get_client_phone, Choice=get_choice_user,
                                             Name_Of_Organization=get_name_of_organization))
    await state.clear()
